{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amitk\\\\Capstone\\\\SocialFriction\\\\frontend\\\\src\\\\components\\\\Suggestions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Suggestions = () => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [implementedSuggestions, setImplementedSuggestions] = useState([]);\n  useEffect(() => {\n    // Fetch AI-powered suggestions when component mounts\n    const fetchSuggestions = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/suggestions');\n        setSuggestions(response.data);\n        setError('');\n      } catch (err) {\n        setError('Failed to fetch suggestions');\n        console.error(err);\n        // Set demo data if API fails\n        setDemoData();\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSuggestions();\n\n    // Load implemented suggestions from localStorage\n    const savedImplemented = localStorage.getItem('implementedSuggestions');\n    if (savedImplemented) {\n      setImplementedSuggestions(JSON.parse(savedImplemented));\n    }\n  }, []);\n  const setDemoData = () => {\n    const demoSuggestions = [{\n      id: '1',\n      title: 'Set specific time blocks for social media',\n      description: 'Instead of checking social media throughout the day, allocate specific time blocks (e.g., 15 minutes in the morning and evening) to catch up on updates.',\n      category: 'time management',\n      difficulty: 'medium'\n    }, {\n      id: '2',\n      title: 'Enable grayscale mode on your phone',\n      description: 'Colorful app icons are designed to grab your attention. Using grayscale mode can reduce the visual appeal of distracting apps.',\n      category: 'digital minimalism',\n      difficulty: 'easy'\n    }, {\n      id: '3',\n      title: 'Create a morning routine without screens',\n      description: 'Start your day with activities like meditation, reading, or exercise instead of immediately checking your phone.',\n      category: 'habit building',\n      difficulty: 'medium'\n    }, {\n      id: '4',\n      title: 'Use website blockers during focus time',\n      description: 'Install browser extensions that block distracting websites during your designated work or study hours.',\n      category: 'productivity',\n      difficulty: 'easy'\n    }, {\n      id: '5',\n      title: 'Practice the 20-20-20 rule for eye strain',\n      description: 'Every 20 minutes, look at something 20 feet away for 20 seconds to reduce digital eye strain.',\n      category: 'health',\n      difficulty: 'easy'\n    }];\n    setSuggestions(demoSuggestions);\n  };\n  const handleImplement = id => {\n    if (implementedSuggestions.includes(id)) {\n      // Un-implement suggestion\n      const updated = implementedSuggestions.filter(suggId => suggId !== id);\n      setImplementedSuggestions(updated);\n      localStorage.setItem('implementedSuggestions', JSON.stringify(updated));\n    } else {\n      // Implement suggestion\n      const updated = [...implementedSuggestions, id];\n      setImplementedSuggestions(updated);\n      localStorage.setItem('implementedSuggestions', JSON.stringify(updated));\n    }\n  };\n  const getDifficultyColor = difficulty => {\n    switch (difficulty) {\n      case 'easy':\n        return 'green';\n      case 'medium':\n        return 'orange';\n      case 'hard':\n        return 'red';\n      default:\n        return 'gray';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"suggestions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI-Powered Suggestions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading suggestions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestions-list\",\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `suggestion-card ${implementedSuggestions.includes(suggestion.id) ? 'implemented' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: suggestion.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"difficulty-badge\",\n            style: {\n              backgroundColor: getDifficultyColor(suggestion.difficulty)\n            },\n            children: suggestion.difficulty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"description\",\n          children: suggestion.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion-footer\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"category\",\n            children: suggestion.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `implement-btn ${implementedSuggestions.includes(suggestion.id) ? 'implemented' : ''}`,\n            onClick: () => handleImplement(suggestion.id),\n            children: implementedSuggestions.includes(suggestion.id) ? 'Implemented âœ“' : 'Implement'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)]\n      }, suggestion.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestions-explanation\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"About AI-Powered Suggestions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"These suggestions are personalized based on your digital habits and behavior patterns. They are designed to help you develop healthier relationships with technology and improve your digital wellbeing. Try implementing one suggestion at a time and track your progress.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Suggestions, \"MkHKgtrLpiRHlS+mHGYHFNYIkfU=\");\n_c = Suggestions;\nexport default Suggestions;\nvar _c;\n$RefreshReg$(_c, \"Suggestions\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","Suggestions","_s","suggestions","setSuggestions","loading","setLoading","error","setError","implementedSuggestions","setImplementedSuggestions","fetchSuggestions","response","get","data","err","console","setDemoData","savedImplemented","localStorage","getItem","JSON","parse","demoSuggestions","id","title","description","category","difficulty","handleImplement","includes","updated","filter","suggId","setItem","stringify","getDifficultyColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","suggestion","style","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/amitk/Capstone/SocialFriction/frontend/src/components/Suggestions.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\ninterface Suggestion {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  difficulty: 'easy' | 'medium' | 'hard';\r\n}\r\n\r\nconst Suggestions: React.FC = () => {\r\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>('');\r\n  const [implementedSuggestions, setImplementedSuggestions] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch AI-powered suggestions when component mounts\r\n    const fetchSuggestions = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await api.get('/suggestions');\r\n        setSuggestions(response.data);\r\n        setError('');\r\n      } catch (err: any) {\r\n        setError('Failed to fetch suggestions');\r\n        console.error(err);\r\n        // Set demo data if API fails\r\n        setDemoData();\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSuggestions();\r\n\r\n    // Load implemented suggestions from localStorage\r\n    const savedImplemented = localStorage.getItem('implementedSuggestions');\r\n    if (savedImplemented) {\r\n      setImplementedSuggestions(JSON.parse(savedImplemented));\r\n    }\r\n  }, []);\r\n\r\n  const setDemoData = () => {\r\n    const demoSuggestions: Suggestion[] = [\r\n      {\r\n        id: '1',\r\n        title: 'Set specific time blocks for social media',\r\n        description: 'Instead of checking social media throughout the day, allocate specific time blocks (e.g., 15 minutes in the morning and evening) to catch up on updates.',\r\n        category: 'time management',\r\n        difficulty: 'medium'\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Enable grayscale mode on your phone',\r\n        description: 'Colorful app icons are designed to grab your attention. Using grayscale mode can reduce the visual appeal of distracting apps.',\r\n        category: 'digital minimalism',\r\n        difficulty: 'easy'\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Create a morning routine without screens',\r\n        description: 'Start your day with activities like meditation, reading, or exercise instead of immediately checking your phone.',\r\n        category: 'habit building',\r\n        difficulty: 'medium'\r\n      },\r\n      {\r\n        id: '4',\r\n        title: 'Use website blockers during focus time',\r\n        description: 'Install browser extensions that block distracting websites during your designated work or study hours.',\r\n        category: 'productivity',\r\n        difficulty: 'easy'\r\n      },\r\n      {\r\n        id: '5',\r\n        title: 'Practice the 20-20-20 rule for eye strain',\r\n        description: 'Every 20 minutes, look at something 20 feet away for 20 seconds to reduce digital eye strain.',\r\n        category: 'health',\r\n        difficulty: 'easy'\r\n      }\r\n    ];\r\n    setSuggestions(demoSuggestions);\r\n  };\r\n\r\n  const handleImplement = (id: string) => {\r\n    if (implementedSuggestions.includes(id)) {\r\n      // Un-implement suggestion\r\n      const updated = implementedSuggestions.filter(suggId => suggId !== id);\r\n      setImplementedSuggestions(updated);\r\n      localStorage.setItem('implementedSuggestions', JSON.stringify(updated));\r\n    } else {\r\n      // Implement suggestion\r\n      const updated = [...implementedSuggestions, id];\r\n      setImplementedSuggestions(updated);\r\n      localStorage.setItem('implementedSuggestions', JSON.stringify(updated));\r\n    }\r\n  };\r\n\r\n  const getDifficultyColor = (difficulty: string): string => {\r\n    switch (difficulty) {\r\n      case 'easy':\r\n        return 'green';\r\n      case 'medium':\r\n        return 'orange';\r\n      case 'hard':\r\n        return 'red';\r\n      default:\r\n        return 'gray';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"suggestions-container\">\r\n      <h2>AI-Powered Suggestions</h2>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      {loading ? (\r\n        <div className=\"loading\">Loading suggestions...</div>\r\n      ) : (\r\n        <div className=\"suggestions-list\">\r\n          {suggestions.map(suggestion => (\r\n            <div\r\n              key={suggestion.id}\r\n              className={`suggestion-card ${implementedSuggestions.includes(suggestion.id) ? 'implemented' : ''}`}\r\n            >\r\n              <div className=\"suggestion-header\">\r\n                <h3>{suggestion.title}</h3>\r\n                <span\r\n                  className=\"difficulty-badge\"\r\n                  style={{ backgroundColor: getDifficultyColor(suggestion.difficulty) }}\r\n                >\r\n                  {suggestion.difficulty}\r\n                </span>\r\n              </div>\r\n              <p className=\"description\">{suggestion.description}</p>\r\n              <div className=\"suggestion-footer\">\r\n                <span className=\"category\">{suggestion.category}</span>\r\n                <button\r\n                  className={`implement-btn ${implementedSuggestions.includes(suggestion.id) ? 'implemented' : ''}`}\r\n                  onClick={() => handleImplement(suggestion.id)}\r\n                >\r\n                  {implementedSuggestions.includes(suggestion.id) ? 'Implemented âœ“' : 'Implement'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"suggestions-explanation\">\r\n        <h3>About AI-Powered Suggestions</h3>\r\n        <p>\r\n          These suggestions are personalized based on your digital habits and behavior patterns.\r\n          They are designed to help you develop healthier relationships with technology and\r\n          improve your digital wellbeing. Try implementing one suggestion at a time and track\r\n          your progress.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Suggestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}