{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amitk\\\\Capstone\\\\SocialFriction\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkLoggedIn = async () => {\n      try {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n        }\n      } catch (error) {\n        console.error('Error checking authentication status:', error);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await authService.login({\n        email,\n        password\n      });\n      setUser(response.user);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      setLoading(true);\n      const response = await authService.register({\n        username,\n        email,\n        password\n      });\n      setUser(response.user);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated: !!user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","authService","jsxDEV","_jsxDEV","AuthContext","user","isAuthenticated","loading","login","register","logout","AuthProvider","children","_s","setUser","setLoading","checkLoggedIn","currentUser","getCurrentUser","error","console","email","password","response","username","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/amitk/Capstone/SocialFriction/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport authService from '../services/authService';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n});\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkLoggedIn = async () => {\n      try {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n        }\n      } catch (error) {\n        console.error('Error checking authentication status:', error);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkLoggedIn();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      const response = await authService.login({ email, password });\n      setUser(response.user);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (username: string, email: string, password: string) => {\n    try {\n      setLoading(true);\n      const response = await authService.register({ username, email, password });\n      setUser(response.user);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        loading,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}