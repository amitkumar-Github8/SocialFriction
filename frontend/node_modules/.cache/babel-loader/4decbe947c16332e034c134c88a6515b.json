{"ast":null,"code":"import api from './api';\nexport const authService = {\n  /**\n   * Register a new user\n   */\n  register: async data => {\n    const response = await api.post('/auth/register', data);\n\n    // Save token and user to localStorage\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  /**\n   * Login user\n   */\n  login: async data => {\n    const response = await api.post('/auth/login', data);\n\n    // Save token and user to localStorage\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  /**\n   * Logout user\n   */\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  /**\n   * Get current user\n   */\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      return JSON.parse(userStr);\n    }\n    return null;\n  },\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  /**\n   * Get user profile\n   */\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","register","data","response","post","token","localStorage","setItem","JSON","stringify","user","login","logout","removeItem","getCurrentUser","userStr","getItem","parse","isAuthenticated","getProfile","get"],"sources":["C:/Users/amitk/Capstone/SocialFriction/frontend/src/services/authService.ts"],"sourcesContent":["import api from './api';\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n}\n\ninterface LoginData {\n  email: string;\n  password: string;\n}\n\ninterface AuthResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n  };\n  message: string;\n}\n\nexport const authService = {\n  /**\n   * Register a new user\n   */\n  register: async (data: RegisterData): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>('/auth/register', data);\n    \n    // Save token and user to localStorage\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    \n    return response.data;\n  },\n\n  /**\n   * Login user\n   */\n  login: async (data: LoginData): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>('/auth/login', data);\n    \n    // Save token and user to localStorage\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    \n    return response.data;\n  },\n\n  /**\n   * Logout user\n   */\n  logout: (): void => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  /**\n   * Get current user\n   */\n  getCurrentUser: (): any => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      return JSON.parse(userStr);\n    }\n    return null;\n  },\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated: (): boolean => {\n    return !!localStorage.getItem('token');\n  },\n\n  /**\n   * Get user profile\n   */\n  getProfile: async (): Promise<any> => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  }\n};\n\nexport default authService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAuBvB,OAAO,MAAMC,WAAW,GAAG;EACzB;AACF;AACA;EACEC,QAAQ,EAAE,MAAOC,IAAkB,IAA4B;IAC7D,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAe,gBAAgB,EAAEF,IAAI,CAAC;;IAErE;IACA,IAAIC,QAAQ,CAACD,IAAI,CAACG,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACD,IAAI,CAACG,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACD,IAAI,CAACQ,IAAI,CAAC,CAAC;IAClE;IAEA,OAAOP,QAAQ,CAACD,IAAI;EACtB,CAAC;EAED;AACF;AACA;EACES,KAAK,EAAE,MAAOT,IAAe,IAA4B;IACvD,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAe,aAAa,EAAEF,IAAI,CAAC;;IAElE;IACA,IAAIC,QAAQ,CAACD,IAAI,CAACG,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACD,IAAI,CAACG,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACD,IAAI,CAACQ,IAAI,CAAC,CAAC;IAClE;IAEA,OAAOP,QAAQ,CAACD,IAAI;EACtB,CAAC;EAED;AACF;AACA;EACEU,MAAM,EAAEA,CAAA,KAAY;IAClBN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED;AACF;AACA;EACEC,cAAc,EAAEA,CAAA,KAAW;IACzB,MAAMC,OAAO,GAAGT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE;MACX,OAAOP,IAAI,CAACS,KAAK,CAACF,OAAO,CAAC;IAC5B;IACA,OAAO,IAAI;EACb,CAAC;EAED;AACF;AACA;EACEG,eAAe,EAAEA,CAAA,KAAe;IAC9B,OAAO,CAAC,CAACZ,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;EACxC,CAAC;EAED;AACF;AACA;EACEG,UAAU,EAAE,MAAAA,CAAA,KAA0B;IACpC,MAAMhB,QAAQ,GAAG,MAAMJ,GAAG,CAACqB,GAAG,CAAC,eAAe,CAAC;IAC/C,OAAOjB,QAAQ,CAACD,IAAI;EACtB;AACF,CAAC;AAED,eAAeF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}